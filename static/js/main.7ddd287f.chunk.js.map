{"version":3,"sources":["utils/GlobalState.js","components/TableRows.js","components/Table.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeContext","createContext","rowNumber","name","job","reducer","state","action","type","length","sort","a","b","idA","idB","comparison","console","log","Provider","EmployeeProvider","value","props","useReducer","dispatch","useEmployeeContext","useContext","TableRows","map","user","scope","Table","inputRef","useRef","inputRefTwo","className","onClick","onSubmit","event","preventDefault","current","ref","placeholder","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ddd287f.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\n///////////\n\nconst EmployeeContext = createContext({\n  rowNumber: 1,\n  name: \"\",\n  job: \"\"\n});\n\n/////////////\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"add\":\n      return [\n        ...state,\n        {\n          rowNumber: state.length + 1,\n          name: action.name,\n          job: action.job\n        }\n      ];\n\n    case \"sort by row number\":\n      function compareRowNum(a, b) {\n        const idA = a.rowNumber;\n        const idB = b.rowNumber;\n\n        let comparison = 0;\n        if (idA > idB) {\n          comparison = 1;\n        } else if (idA < idB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      return [...state.sort(compareRowNum)];\n\n    case \"sort by name\":\n      function compareName(a, b) {\n        const idA = a.name;\n        const idB = b.name;\n\n        let comparison = 0;\n        if (idA > idB) {\n          comparison = 1;\n        } else if (idA < idB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      return [...state.sort(compareName)];\n\n    case \"sort by job\":\n      console.log(state);\n\n      function compareJob(a, b) {\n        const idA = a.job;\n        const idB = b.job;\n\n        let comparison = 0;\n        if (idA > idB) {\n          comparison = 1;\n        } else if (idA < idB) {\n          comparison = -1;\n        }\n        return comparison;\n      }\n      return [...state.sort(compareJob)];\n\n    default:\n      return state;\n  }\n}\n\n////////////\n\nconst { Provider } = EmployeeContext;\n\nfunction EmployeeProvider({ value = [], ...props }) {\n  const [state, dispatch] = useReducer(reducer, []);\n\n  return <Provider value={[state, dispatch]} {...props} />;\n}\n\n////////////\n\nfunction useEmployeeContext() {\n  return useContext(EmployeeContext);\n}\n\nexport { EmployeeProvider, useEmployeeContext };\n","import React from \"react\";\nimport { useEmployeeContext } from \"../utils/GlobalState\";\n\nfunction TableRows() {\n  // eslint-disable-next-line\n  const [state, _] = useEmployeeContext();\n\n  return (\n    <tbody>\n      {state.map(user => (\n        <tr>\n          <th scope=\"row\">{user.rowNumber}</th>\n          <td>{user.name}</td>\n          <td>{user.job}</td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nexport default TableRows;\n","import React, { useRef } from \"react\";\nimport { useEmployeeContext } from \"../utils/GlobalState\";\nimport TableRows from \"./TableRows\";\n\nfunction Table() {\n  // eslint-disable-next-line\n  const [_, dispatch] = useEmployeeContext();\n\n  const inputRef = useRef();\n  const inputRefTwo = useRef();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    dispatch({\n      type: \"add\",\n      name: inputRef.current.value,\n      job: inputRefTwo.current.value\n    });\n    inputRef.current.value = \"\";\n    inputRefTwo.current.value = \"\";\n  }\n\n  return (\n    <div>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th\n              onClick={() => dispatch({ type: \"sort by row number\" })}\n              scope=\"col\"\n            >\n              #\n            </th>\n            <th onClick={() => dispatch({ type: \"sort by name\" })} scope=\"col\">\n              Name\n            </th>\n            <th onClick={() => dispatch({ type: \"sort by job\" })} scope=\"col\">\n              Job\n            </th>\n          </tr>\n        </thead>\n        <TableRows />\n      </table>\n      <form onSubmit={handleSubmit}>\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          name=\"name\"\n          placeholder=\"Enter Name Here\"\n        />\n        <input\n          ref={inputRefTwo}\n          className=\"form-control\"\n          name=\"job\"\n          placeholder=\"Enter Job Title Here\"\n        />\n        <button className=\"btn-success\">Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div>\n      <h1>Employee Directory</h1>\n    </div>\n  );\n}\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\nimport { EmployeeProvider } from \"./utils/GlobalState\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <EmployeeProvider>\n        <Header />\n        <Table />\n      </EmployeeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}